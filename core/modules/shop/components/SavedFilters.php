<?php
/**
 * Created by PhpStorm.
 * User: pavka
 * Date: 10/9/15
 * Time: 1:35 PM
 */

namespace Energine\shop\components;


use Energine\share\components\DBDataSet;
use Energine\share\gears\Filter;
use Energine\share\gears\JSONCustomBuilder;
use Energine\share\gears\QAL;

class SavedFilters extends DBDataSet {
    /**
     * @copydoc DataSet::__construct
     */
    public function __construct($name, array $params = NULL) {
        parent::__construct($name, $params); // TODO: Change the autogenerated stub
        $this->setTableName('shop_saved_filters');
        $this->setFilter(['u_id' => E()->getUser()->getID(), 'site_id' => E()->getSiteManager()->getCurrentSite()->id]);
    }

    protected function defineParams() {
        return array_merge(
            parent::defineParams(),
            [
                'active' => true
            ]
        );
    }

    protected function loadData() {
        $data = parent::loadData();
        if (!empty($data)) {
            $map = E()->getMap();
            $data = array_map(function ($row) use ($map) {
                $row['sf_link'] = $map->getURLByID($row['smap_id']) . '?' . Filter::TAG_NAME . '=' . $row['sf_data'];
                return $row;
            }, $data);
        }
        return $data;
    }

    protected function save() {
        $this->setBuilder($b = new JSONCustomBuilder());
        $this->dbh->beginTransaction();
        try {
            if (!isset($_POST['id']) && !isset($_POST['name'])) {
                throw new \InvalidArgumentException(E()->Utils->translate('ERR_NO_DATA'));
            }
            $this->dbh->modify(QAL::UPDATE, $this->getTableName(), ['sf_name' => $realName = filter_var($_POST['name'], FILTER_SANITIZE_STRING)], ['u_id' => E()->getUser()->getID(), 'site_id' => E()->getSiteManager()->getCurrentSite()->id, 'sf_id' => (int)$_POST['id']]);

            $this->dbh->commit();
            $b->setProperty('name', $realName);
        } catch (\Exception $e) {
            $this->dbh->rollback();
            $b->setProperty('result', false);
            $b->setProperty('message', $e->getMessage());
        }
    }
    protected function delete($id) {
        $this->setBuilder($b = new JSONCustomBuilder());
        $this->dbh->beginTransaction();
        try {
            $this->dbh->modify(QAL::DELETE, $this->getTableName(), false, ['u_id' => E()->getUser()->getID(), 'site_id' => E()->getSiteManager()->getCurrentSite()->id, 'sf_id' => $id]);
            $this->dbh->commit();
        } catch (\Exception $e) {
            $this->dbh->rollback();
            $b->setProperty('result', false);
            $b->setProperty('message', $e->getMessage());
        }
    }

}